{
	"openapi": "3.0.1",
	"info": {
		"title": "PhoneBook API Documentation ",
		"version": "1.0.0",
		"description": "API Documentation for the application"
	},
	"import": {
		"type": "json"
	},
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"servers": [
		{ "url": "http://localhost:4000/api" },
		{ "url": "https://nodejs-rest-api-8x2z.onrender.com/api" }
	],
	"tags": [
		{
			"name": "Auth",
			"description": "Authorization"
		},
		{
			"name": "Contacts",
			"description": "Contacts data"
		}
	],
	"paths": {
		"/auth": {
			"get": {
				"tags": ["Auth"],
				"summary": "Social login",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"token": {
											"type": "string",
											"description": "Authentication token"
										},
										"redirect": {
											"type": "string",
											"description": "Redirect URL"
										}
									},
									"example": {
										"token": "your_jwt_token",
										"redirect": "https://your-frontend-url.com/My-Phonebook/social_auth?token=your_jwt_token"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/auth/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "Register a new user",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "User's name",
										"example": "John Doe",
										"required": [true, "Set name for user"]
									},
									"email": {
										"type": "string",
										"description": "User's email",
										"example": "john.doe@example.com",
										"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
										"required": [true, "Set email for user"]
									},
									"password": {
										"type": "string",
										"description": "User's password",
										"example": "user_password",
										"required": [true, "Set password for user"]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string",
											"description": "User's name",
											"example": "John Doe"
										},
										"email": {
											"type": "string",
											"description": "User's email",
											"example": "john.doe@example.com",
											"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
										},
										"avatarURL": {
											"type": "string",
											"description": "User's avatar url",
											"example": "https://example.com/avatar.jpg"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"409": {
						"description": "Email in use"
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "Login a user",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"description": "User's email",
										"example": "john.doe@example.com",
										"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
										"required": [true, "Set email for user"]
									},
									"password": {
										"type": "string",
										"description": "User's password",
										"example": "user_password",
										"required": [true, "Set password for user"]
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"token": {
											"type": "string",
											"description": "Authentication token",
											"example": "your_jwt_token"
										},
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "User ID",
													"example": "60d21baee76c2a456789d23b"
												},
												"name": {
													"type": "string",
													"description": "User's name",
													"example": "John Doe"
												},
												"email": {
													"type": "string",
													"description": "User's email",
													"example": "john.doe@example.com",
													"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
												},
												"avatarURL": {
													"type": "string",
													"description": "User's avatar URL",
													"example": "https://example.com/avatar.jpg"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"tags": ["Auth"],
				"summary": "Logout a user",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"responses": {
					"204": {
						"description": "Logout successful"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/auth/current": {
			"get": {
				"tags": ["Auth"],
				"summary": "Get current user",
				"security": [{ "Bearer": [] }],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "User ID",
											"example": "60d21baee76c2a456789d23b"
										},
										"name": {
											"type": "string",
											"description": "User's name",
											"example": "John Doe"
										},
										"email": {
											"type": "string",
											"description": "User's email",
											"example": "john.doe@example.com",
											"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
										},
										"avatarURL": {
											"type": "string",
											"description": "User's avatar URL",
											"example": "https://example.com/avatar.jpg"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/auth/{userId}": {
			"delete": {
				"tags": ["Auth"],
				"summary": "Delete a user",
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"description": "ID of the user to delete",
						"schema": {
							"type": "string",
							"example": "60d21baee76c2a456789d23b"
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"responses": {
					"204": {
						"description": "No Content"
					},
					"404": {
						"description": "User not found"
					},
					"400": {
						"description": "Invalid user ID"
					}
				}
			}
		},
		"/auth/avatar": {
			"patch": {
				"tags": ["Auth"],
				"summary": "Change user avatar",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"avatar": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": ["avatar"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Avatar updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"avatarURL": {
											"type": "string",
											"description": "URL of the updated avatar",
											"example": "https://storage.googleapis.com/node-hw4-edfa3.appspot.com/user_avatar.jpg"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"406": {
						"description": "Error loading avatar"
					}
				}
			}
		},
		"/auth/name": {
			"patch": {
				"tags": ["Auth"],
				"summary": "Change user name",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "New name of the user",
										"example": "John Doe"
									}
								},
								"required": ["name"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Name updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string",
													"description": "Updated name of the user",
													"example": "John Doe"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/auth/pass": {
			"patch": {
				"tags": ["Auth"],
				"summary": "Change user password",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"oldPassword": {
										"type": "string",
										"description": "Current password of the user",
										"example": "current_password"
									},
									"newPassword": {
										"type": "string",
										"description": "New password for the user",
										"example": "new_password"
									}
								},
								"required": ["oldPassword", "newPassword"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"token": {
											"type": "string",
											"description": "New JWT token",
											"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
										},
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "User ID",
													"example": "60d0fe4f5311236168a109ca"
												},
												"name": {
													"type": "string",
													"description": "Name of the user",
													"example": "John Doe"
												},
												"email": {
													"type": "string",
													"description": "Email of the user",
													"example": "john.doe@example.com"
												},
												"avatarURL": {
													"type": "string",
													"description": "Avatar URL of the user",
													"example": "https://example.com/avatar.jpg"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized or Password is wrong"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/auth/repair/{id}": {
			"get": {
				"tags": ["Auth"],
				"summary": "Get password repair link",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "User ID"
					}
				],
				"responses": {
					"302": {
						"description": "Redirect to password repair link",
						"headers": {
							"Location": {
								"description": "The URL to the password repair page",
								"schema": {
									"type": "string",
									"example": "https://frontend.com/repair/{id}?vt={verificationToken}"
								}
							}
						}
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/auth/repair": {
			"patch": {
				"tags": ["Auth"],
				"summary": "Repair user password",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"description": "User ID",
										"example": "60d0fe4f5311236168a109ca"
									},
									"verificationToken": {
										"type": "string",
										"description": "Verification token",
										"example": "verification_token_example"
									},
									"password": {
										"type": "string",
										"description": "New password",
										"example": "new_password"
									}
								},
								"required": ["id", "verificationToken", "password"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string",
													"description": "User name",
													"example": "John Doe"
												},
												"email": {
													"type": "string",
													"description": "User email",
													"example": "john.doe@example.com"
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found"
					},
					"403": {
						"description": "Error verification token"
					}
				}
			}
		},
		"/auth/verify/{verificationToken}": {
			"get": {
				"tags": ["Auth"],
				"summary": "Confirm email verification",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "verificationToken",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "Verification token"
					}
				],
				"responses": {
					"302": {
						"description": "Redirect to login page after verification",
						"headers": {
							"Location": {
								"description": "The URL to the login page",
								"schema": {
									"type": "string",
									"example": "https://frontend.com/login"
								}
							}
						}
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/auth/verify": {
			"post": {
				"tags": ["Auth"],
				"summary": "Re-send verification email",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"description": "User email",
										"example": "john.doe@example.com"
									},
									"reg": {
										"type": "boolean",
										"description": "Flag to indicate if the request is for password recovery",
										"example": false
									}
								},
								"required": ["email"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Verification or password recovery email sent",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message",
											"example": "Verification email sent"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Email or password is wrong"
					},
					"400": {
						"description": "Verification has already been passed"
					}
				}
			}
		},

		"/contacts": {
			"get": {
				"tags": ["Contacts"],
				"summary": "List all contacts",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "integer",
							"default": 1
						},
						"description": "Page number"
					},
					{
						"name": "perPage",
						"in": "query",
						"schema": {
							"type": "integer",
							"default": 20
						},
						"description": "Number of contacts per page"
					},
					{
						"name": "favorite",
						"in": "query",
						"schema": {
							"type": "boolean"
						},
						"description": "Filter by favorite contacts"
					}
				],
				"responses": {
					"200": {
						"description": "List of contacts",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Contact"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"post": {
				"tags": ["Contacts"],
				"summary": "Add a new contact",
				"security": [{ "Bearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Contact"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Contact created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Contact"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/contacts/{contactId}": {
			"get": {
				"tags": ["Contacts"],
				"summary": "Get a contact by ID",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "ID of the contact to retrieve"
					}
				],
				"responses": {
					"200": {
						"description": "Contact details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Contact"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Contact not found"
					}
				}
			},
			"patch": {
				"tags": ["Contacts"],
				"summary": "Update a contact",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "ID of the contact to update"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Contact"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Contact updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Contact"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Contact not found"
					}
				}
			},
			"delete": {
				"tags": ["Contacts"],
				"summary": "Delete a contact",
				"security": [{ "Bearer": [] }],
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "ID of the contact to delete"
					}
				],
				"responses": {
					"200": {
						"description": "Contact deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "ID of the deleted contact",
											"example": "60d0fe4f5311236168a109ca"
										},
										"message": {
											"type": "string",
											"description": "Delete success message",
											"example": "Delete success"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Contact not found"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Contact": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the contact",
						"example": "John Doe"
					},
					"gender": {
						"type": "string",
						"description": "Gender of the contact",
						"enum": ["other", "male", "female", "business"]
					},
					"email": {
						"type": "string",
						"description": "Email of the contact",
						"example": "john.doe@example.com",
						"pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
					},
					"phone": {
						"type": "string",
						"description": "Phone number of the contact",
						"example": "+123456789"
					},
					"favorite": {
						"type": "boolean",
						"description": "Favorite status",
						"default": false
					},
					"owner": {
						"type": "string",
						"description": "Owner ID",
						"example": "60d21baee76c2a456789d23b"
					}
				},
				"required": ["name", "gender", "phone", "email"]
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT",
				"description": "Enter JWT token obtained after logging in"
			}
		}
	},
	"securityDefinitions": {
		"Bearer": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	},
	"host": "virtserver.swaggerhub.com",
	"schemes": ["https"]
}
